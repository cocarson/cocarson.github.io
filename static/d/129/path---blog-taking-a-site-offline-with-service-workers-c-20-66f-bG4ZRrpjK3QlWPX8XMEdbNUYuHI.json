{"data":{"markdownRemark":{"html":"<p><strong>Purpose:</strong> Allow a cached site to be loaded offline.</p>\n<p>Service workers are a technology that have been emphasized by the web community for the past few years, along with terms like \"Progressive Web Apps\" and other futuristic technologies. To be honest, I was always put off by the name. It so jargon-y and technical that I figured it must be a fad that was better to let pass.</p>\n<p>Of course, this does not appear to be the case. Service workers are being implemented all over the web; from sites trying to provide seamless offline experiences to mega blogs interested in bombarding you with desktop push notifications, service workers are becoming a fundamental part of web development.</p>\n<p>So what is a service worker? In it's simplest form, a service worker is a JavaScript file that has access to all requests and corresponding responses. For some reason I figured a service worker had to be a lot more complex than that. But no, service workers are just scripts that intercepts network requests.</p>\n<p>Why is this even necessary? On e of the core motivations for service workers are for providing better mobile experiences when connection is lost. In a mobile app if you loose connection the app doesn't crash and burn, instead it lets you know about the connection loss and allows you to continue using the app with what ever data it has downloaded. When connection returns, the app doesn't require a full reboot (refresh), instead it automatically reconnects and immediately performs relevant network requests.</p>\n<p>The allure of service workers is their potential to allow web apps to exhibit similar functionality. This is especially necessary internationally where phone plans may be limited and users do not want to download entire apps to their restricted phone storage. Instead they can use the web app, without missing out on the benefits of a mobile application.</p>\n<p>To start writing a service worker there are a few JavaScript prerequisites I recommend understanding:</p>\n<ol>\n<li>Event based programming</li>\n</ol>\n<p>| - Service workers respond to events - the FetchEvent, InstallEvent, NotificationEvent, and SyncEvent to name a few. I would definitely recommend an understanding of JS event based programming and callbacks before learning to write a service worker.</p>\n<ol start=\"2\">\n<li>\n<p>Promises</p>\n</li>\n<li>\n<p>Service workers respond to events - the FetchEvent, InstallEvent, NotificationEvent, and SyncEvent to name a few. I would definitely recommend an understanding of JS event based programming and callbacks before learning to write a service worker.</p>\n</li>\n<li>\n<p>Writing Promises. While Promise logic is not always easy to follow, understanding the way they work is paramount to writing a service worker. Because services workers have the ability to intercept every single request the browser makes (from a given domain) it is important that they are non-blocking. Therefore, service work APIs rely heavily on Promises.</p>\n</li>\n</ol>\n<p>All that is left to begin writing a service worker is learning the related APIs and how they fit together. This requires a bit of memorization off the bat, but luckily there is great <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">documentation</a> for reference. (love you MDN)</p>\n<h2>Getting Started</h2>\n<p>The service worker that we are going to write is relatively minimal. It should cache all of the requests related to a web page. This includes the HTML page and all of the assets loaded by that page.</p>\n<h3>Installing a service worker</h3>\n<p>A service worker needs to be \"installed\" before it can begin processing requests. We'll dive into the service worker \"life cycle\" a little later, but for now just know what simply having a service worker file in the working directory is not enough to begin processing requests.</p>\n<p>Here is the initial file structure. To save time I created a <a href=\"https://glitch.com/edit/#!/level-teller\">Glitch project</a> that can be \"remixed\" (top right corner) and used to follow along. Another benefit of developing a service worker on Glitch is that Glitch will also host your project. This is important because we're attempting to load a site offline, if the browser is loading the files locally, then we can't test the offline behavior!</p>\n<p>Site structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/\n|-- index.html\n|-- style.css\n|-- script.js\n|-- sw.js</code></pre></div>","frontmatter":{"date":"March 05, 2019","path":"/blog/taking-a-site-offline-with-service-workers","title":"Taking a Site Offline with Service Workers ðŸ¤–","image":null}}},"pageContext":{}}